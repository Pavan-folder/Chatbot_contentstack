{"code":"import { __assign, __awaiter, __generator, __spreadArray } from \"tslib\";\r\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useState, useRef, useEffect } from 'react';\r\nvar Chat = function (_a) {\r\n    var apiUrl = _a.apiUrl, _b = _a.provider, provider = _b === void 0 ? 'openai' : _b, apiKey = _a.apiKey;\r\n    var _c = useState([]), messages = _c[0], setMessages = _c[1];\r\n    var _d = useState(''), input = _d[0], setInput = _d[1];\r\n    var _e = useState(false), isLoading = _e[0], setIsLoading = _e[1];\r\n    var messagesEndRef = useRef(null);\r\n    var scrollToBottom = function () {\r\n        var _a;\r\n        (_a = messagesEndRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({ behavior: 'smooth' });\r\n    };\r\n    useEffect(function () {\r\n        scrollToBottom();\r\n    }, [messages]);\r\n    var sendMessage = function () { return __awaiter(void 0, void 0, void 0, function () {\r\n        var userMessage, response, reader, decoder, botMessageText_1, botMessage_1, _a, done, value, chunk, lines, _i, lines_1, line, data, parsed, error_1, errorMessage_1;\r\n        var _b;\r\n        return __generator(this, function (_c) {\r\n            switch (_c.label) {\r\n                case 0:\r\n                    if (!input.trim())\r\n                        return [2 /*return*/];\r\n                    userMessage = {\r\n                        id: Date.now().toString(),\r\n                        text: input,\r\n                        sender: 'user',\r\n                        timestamp: new Date(),\r\n                    };\r\n                    setMessages(function (prev) { return __spreadArray(__spreadArray([], prev, true), [userMessage], false); });\r\n                    setInput('');\r\n                    setIsLoading(true);\r\n                    _c.label = 1;\r\n                case 1:\r\n                    _c.trys.push([1, 6, 7, 8]);\r\n                    return [4 /*yield*/, fetch(\"\".concat(apiUrl, \"/chat\"), {\r\n                            method: 'POST',\r\n                            headers: __assign({ 'Content-Type': 'application/json' }, (apiKey && { 'Authorization': \"Bearer \".concat(apiKey) })),\r\n                            body: JSON.stringify({ message: input, provider: provider }),\r\n                        })];\r\n                case 2:\r\n                    response = _c.sent();\r\n                    if (!response.ok) {\r\n                        throw new Error('Failed to send message');\r\n                    }\r\n                    reader = (_b = response.body) === null || _b === void 0 ? void 0 : _b.getReader();\r\n                    decoder = new TextDecoder();\r\n                    botMessageText_1 = '';\r\n                    botMessage_1 = {\r\n                        id: (Date.now() + 1).toString(),\r\n                        text: '',\r\n                        sender: 'bot',\r\n                        timestamp: new Date(),\r\n                    };\r\n                    setMessages(function (prev) { return __spreadArray(__spreadArray([], prev, true), [botMessage_1], false); });\r\n                    _c.label = 3;\r\n                case 3:\r\n                    if (!true) return [3 /*break*/, 5];\r\n                    return [4 /*yield*/, reader.read()];\r\n                case 4:\r\n                    _a = _c.sent(), done = _a.done, value = _a.value;\r\n                    if (done)\r\n                        return [3 /*break*/, 5];\r\n                    chunk = decoder.decode(value);\r\n                    lines = chunk.split('\\n');\r\n                    for (_i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\r\n                        line = lines_1[_i];\r\n                        if (line.startsWith('data: ')) {\r\n                            data = line.slice(6);\r\n                            if (data === '[DONE]')\r\n                                break;\r\n                            try {\r\n                                parsed = JSON.parse(data);\r\n                                if (parsed.content) {\r\n                                    botMessageText_1 += parsed.content;\r\n                                    setMessages(function (prev) {\r\n                                        return prev.map(function (msg) {\r\n                                            return msg.id === botMessage_1.id ? __assign(__assign({}, msg), { text: botMessageText_1 }) : msg;\r\n                                        });\r\n                                    });\r\n                                }\r\n                            }\r\n                            catch (e) {\r\n                                // Ignore parsing errors\r\n                            }\r\n                        }\r\n                    }\r\n                    return [3 /*break*/, 3];\r\n                case 5: return [3 /*break*/, 8];\r\n                case 6:\r\n                    error_1 = _c.sent();\r\n                    console.error('Error sending message:', error_1);\r\n                    errorMessage_1 = {\r\n                        id: (Date.now() + 2).toString(),\r\n                        text: 'Sorry, there was an error processing your message.',\r\n                        sender: 'bot',\r\n                        timestamp: new Date(),\r\n                    };\r\n                    setMessages(function (prev) { return __spreadArray(__spreadArray([], prev, true), [errorMessage_1], false); });\r\n                    return [3 /*break*/, 8];\r\n                case 7:\r\n                    setIsLoading(false);\r\n                    return [7 /*endfinally*/];\r\n                case 8: return [2 /*return*/];\r\n            }\r\n        });\r\n    }); };\r\n    var handleKeyPress = function (e) {\r\n        if (e.key === 'Enter' && !e.shiftKey) {\r\n            e.preventDefault();\r\n            sendMessage();\r\n        }\r\n    };\r\n    return (_jsxs(\"div\", __assign({ style: { width: '400px', height: '600px', border: '1px solid #ccc', borderRadius: '8px', display: 'flex', flexDirection: 'column' } }, { children: [_jsxs(\"div\", __assign({ style: { flex: 1, padding: '16px', overflowY: 'auto' } }, { children: [messages.map(function (message) { return (_jsx(\"div\", __assign({ style: { marginBottom: '12px', textAlign: message.sender === 'user' ? 'right' : 'left' } }, { children: _jsx(\"div\", __assign({ style: {\r\n                                display: 'inline-block',\r\n                                padding: '8px 12px',\r\n                                borderRadius: '8px',\r\n                                backgroundColor: message.sender === 'user' ? '#007bff' : '#f1f1f1',\r\n                                color: message.sender === 'user' ? 'white' : 'black',\r\n                                maxWidth: '80%',\r\n                                wordWrap: 'break-word',\r\n                            } }, { children: message.text })) }), message.id)); }), isLoading && (_jsx(\"div\", __assign({ style: { textAlign: 'left', marginBottom: '12px' } }, { children: _jsx(\"div\", __assign({ style: { display: 'inline-block', padding: '8px 12px', borderRadius: '8px', backgroundColor: '#f1f1f1' } }, { children: \"Typing...\" })) }))), _jsx(\"div\", { ref: messagesEndRef })] })), _jsx(\"div\", __assign({ style: { padding: '16px', borderTop: '1px solid #ccc' } }, { children: _jsxs(\"div\", __assign({ style: { display: 'flex' } }, { children: [_jsx(\"input\", { type: \"text\", value: input, onChange: function (e) { return setInput(e.target.value); }, onKeyPress: handleKeyPress, placeholder: \"Type your message...\", style: { flex: 1, padding: '8px', border: '1px solid #ccc', borderRadius: '4px' }, disabled: isLoading }), _jsx(\"button\", __assign({ onClick: sendMessage, disabled: isLoading || !input.trim(), style: { marginLeft: '8px', padding: '8px 16px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' } }, { children: \"Send\" }))] })) }))] })));\r\n};\r\nexport default Chat;\r\n","references":["C:/Users/revan/OneDrive/Desktop/chatbot/sdk/node_modules/@types/react/ts5.0/index.d.ts","C:/Users/revan/OneDrive/Desktop/chatbot/sdk/node_modules/axios/index.d.ts"],"dts":{"name":"C:/Users/revan/OneDrive/Desktop/chatbot/sdk/dist/Chat.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nexport interface Message {\r\n    id: string;\r\n    text: string;\r\n    sender: 'user' | 'bot';\r\n    timestamp: Date;\r\n}\r\nexport interface ChatProps {\r\n    apiUrl: string;\r\n    provider?: 'openai' | 'groq' | 'anthropic';\r\n    apiKey?: string;\r\n}\r\ndeclare const Chat: React.FC<ChatProps>;\r\nexport default Chat;\r\n"}}
